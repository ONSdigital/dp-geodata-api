// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-geodata-api/cmd/filescli/app"
	"sync"
)

// Ensure, that FilerMock does implement app.Filer.
// If this is not the case, regenerate this file with moq.
var _ app.Filer = &FilerMock{}

// FilerMock is a mock implementation of app.Filer.
//
// 	func TestSomethingThatUsesFiler(t *testing.T) {
//
// 		// make and configure a mocked app.Filer
// 		mockedFiler := &FilerMock{
// 			PublishCollectionFunc: func(ctx context.Context, id string) error {
// 				panic("mock out the PublishCollection method")
// 			},
// 			SetCollectionIDFunc: func(ctx context.Context, path string, id string) error {
// 				panic("mock out the SetCollectionID method")
// 			},
// 		}
//
// 		// use mockedFiler in code that requires app.Filer
// 		// and then make assertions.
//
// 	}
type FilerMock struct {
	// PublishCollectionFunc mocks the PublishCollection method.
	PublishCollectionFunc func(ctx context.Context, id string) error

	// SetCollectionIDFunc mocks the SetCollectionID method.
	SetCollectionIDFunc func(ctx context.Context, path string, id string) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishCollection holds details about calls to the PublishCollection method.
		PublishCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// SetCollectionID holds details about calls to the SetCollectionID method.
		SetCollectionID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Path is the path argument value.
			Path string
			// ID is the id argument value.
			ID string
		}
	}
	lockPublishCollection sync.RWMutex
	lockSetCollectionID   sync.RWMutex
}

// PublishCollection calls PublishCollectionFunc.
func (mock *FilerMock) PublishCollection(ctx context.Context, id string) error {
	if mock.PublishCollectionFunc == nil {
		panic("FilerMock.PublishCollectionFunc: method is nil but Filer.PublishCollection was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockPublishCollection.Lock()
	mock.calls.PublishCollection = append(mock.calls.PublishCollection, callInfo)
	mock.lockPublishCollection.Unlock()
	return mock.PublishCollectionFunc(ctx, id)
}

// PublishCollectionCalls gets all the calls that were made to PublishCollection.
// Check the length with:
//     len(mockedFiler.PublishCollectionCalls())
func (mock *FilerMock) PublishCollectionCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockPublishCollection.RLock()
	calls = mock.calls.PublishCollection
	mock.lockPublishCollection.RUnlock()
	return calls
}

// SetCollectionID calls SetCollectionIDFunc.
func (mock *FilerMock) SetCollectionID(ctx context.Context, path string, id string) error {
	if mock.SetCollectionIDFunc == nil {
		panic("FilerMock.SetCollectionIDFunc: method is nil but Filer.SetCollectionID was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Path string
		ID   string
	}{
		Ctx:  ctx,
		Path: path,
		ID:   id,
	}
	mock.lockSetCollectionID.Lock()
	mock.calls.SetCollectionID = append(mock.calls.SetCollectionID, callInfo)
	mock.lockSetCollectionID.Unlock()
	return mock.SetCollectionIDFunc(ctx, path, id)
}

// SetCollectionIDCalls gets all the calls that were made to SetCollectionID.
// Check the length with:
//     len(mockedFiler.SetCollectionIDCalls())
func (mock *FilerMock) SetCollectionIDCalls() []struct {
	Ctx  context.Context
	Path string
	ID   string
} {
	var calls []struct {
		Ctx  context.Context
		Path string
		ID   string
	}
	mock.lockSetCollectionID.RLock()
	calls = mock.calls.SetCollectionID
	mock.lockSetCollectionID.RUnlock()
	return calls
}
